// Generated by stratus_hls 21.20-p100  (96289.240513)
// Tue May 30 22:05:15 2023
// from ../SobelFilter.cpp

`timescale 1ps / 1ps


module SobelFilter( i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_avg_busy, o_avg_vld, o_avg_data );

    input i_clk;
    input i_rst;
    input i_rgb_vld;
    input [31:0] i_rgb_data;
    input o_avg_busy;
    output i_rgb_busy;
    output o_avg_vld;
    output [31:0] o_avg_data;
    reg [31:0] o_avg_data;
    reg o_avg_m_req_m_prev_trig_req;
    reg o_avg_m_unacked_req;
    wire SobelFilter_Xor_1Ux1U_1U_1_1_out1;
    wire SobelFilter_Or_1Ux1U_1U_4_2_out1;
    reg SobelFilter_N_Muxb_1_2_0_4_4_out1;
    reg i_rgb_m_unvalidated_req;
    wire SobelFilter_gen_busy_r_4_62_gnew_req;
    wire SobelFilter_gen_busy_r_4_62_gdiv;
    wire SobelFilter_gen_busy_r_4_62_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next;
    reg[1:0] global_state_next;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx3S_32S_4_26_in2;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_24_in2;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx3S_32S_4_23_out1;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx3S_32S_4_23_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_22_out1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx7S_32S_4_21_out1;
    /*signed*/reg[3:0] SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx7S_32S_4_21_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_20_out1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx7S_32S_4_19_out1;
    /*signed*/reg[4:0] SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx7S_32S_4_19_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_18_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_18_in1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_34_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_18_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_32_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_31_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_31_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_31_in2;
    /*signed*/reg[30:0] SobelFilter_Minus_32S_32S_4_16_in1_slice;
    /*signed*/reg[3:0] SobelFilter_Mul_32Sx6S_32S_4_15_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx6S_32S_4_15_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_14_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_14_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_14_in2;
    reg gs_ctrl_do_filter_h4;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx4U_32S_4_13_in2;
    reg gs_ctrl_do_filter_h2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_12_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_11_out1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_10_out1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_10_in1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx4S_32S_4_9_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_8_out1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx7S_32S_4_7_out1;
    /*signed*/reg[2:0] SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx7S_32S_4_7_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_6_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_6_in2;
    reg gs_ctrl_do_filter_h6;
    reg[31:0] s_reg_9;
    reg[31:0] s_reg_8;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_16_out1;
    reg[31:0] s_reg_66;
    reg[28:0] s_reg_6_slice;
    reg[31:0] s_reg_7;
    reg[31:0] s_reg_5;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx4U_32S_4_13_out1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx9U_32S_4_27_out1;
    reg[31:0] s_reg_49;
    reg[31:0] s_reg_4;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx3S_32S_4_26_out1;
    reg[31:0] s_reg_31;
    reg[31:0] s_reg_30;
    reg[31:0] s_reg_29;
    reg[31:0] s_reg_28;
    reg[31:0] s_reg_27;
    reg[31:0] s_reg_26;
    reg[31:0] s_reg_25;
    reg[31:0] s_reg_24;
    reg[31:0] s_reg_23;
    reg[31:0] s_reg_22;
    reg[31:0] s_reg_21;
    reg[31:0] s_reg_20;
    reg[31:0] s_reg_19;
    reg[31:0] s_reg_18;
    reg[31:0] s_reg_17;
    reg[31:0] s_reg_16;
    reg[31:0] s_reg_15;
    reg[31:0] s_reg_14;
    reg[31:0] s_reg_13;
    reg[31:0] s_reg_12;
    reg[31:0] s_reg_11;
    reg[31:0] s_reg_10;
    wire SobelFilter_And_1Ux1U_1U_4_60_out1;
    wire[2:0] SobelFilter_gen_busy_r_4_62_out1;
    wire SobelFilter_Not_1U_1U_1_3_out1;
    reg o_avg_m_req_m_trig_req;
    reg i_rgb_m_busy_req_0;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_24_out1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx6S_32S_4_15_out1;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx6U_32S_4_25_out1;
    reg[1:0] global_state;
    reg stall0;

    
    // resource: mux_32bx3i0c
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_o_avg_data
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                2'd0, 2'd3: 
                  begin
                    o_avg_data <= SobelFilter_Mul_32Sx6U_32S_4_25_out1;
                  end
                2'd1: 
                  begin
                    o_avg_data <= SobelFilter_Mul_32Sx6S_32S_4_15_out1;
                  end
                2'd2: 
                  begin
                    o_avg_data <= SobelFilter_Add_32Ux32U_32U_1_24_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ss_1
    always @(posedge i_clk)
      begin : drive_i_rgb_m_busy_req_0
        if (i_rst == 1'b0) 
          begin
            i_rgb_m_busy_req_0 <= 1'd1;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        i_rgb_m_busy_req_0 <= 1'd0;
                      end
                    2'd1: 
                      begin
                        i_rgb_m_busy_req_0 <= 1'd1;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_o_avg_m_req_m_trig_req
        if (i_rst == 1'b0) 
          begin
            o_avg_m_req_m_trig_req <= 1'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd2: 
                      begin
                        o_avg_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_3_out1;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx3i1c
    always @(SobelFilter_And_1Ux1U_1U_4_60_out1 or SobelFilter_gen_busy_r_4_62_out1[0] or global_state)
      begin : drive_stall0
        case (global_state) 
          2'd1: 
            begin
              stall0 = SobelFilter_gen_busy_r_4_62_out1[0];
            end
          2'd3: 
            begin
              stall0 = SobelFilter_And_1Ux1U_1U_4_60_out1;
            end
          default: 
            begin
              stall0 = 1'b0;
            end
        endcase
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_10
        if (i_rst == 1'b0) 
          begin
            s_reg_10 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_10 <= s_reg_11;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_11
        if (i_rst == 1'b0) 
          begin
            s_reg_11 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_11 <= s_reg_12;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_12
        if (i_rst == 1'b0) 
          begin
            s_reg_12 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_12 <= s_reg_13;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_13
        if (i_rst == 1'b0) 
          begin
            s_reg_13 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_13 <= s_reg_14;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_14
        if (i_rst == 1'b0) 
          begin
            s_reg_14 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_14 <= s_reg_15;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_15
        if (i_rst == 1'b0) 
          begin
            s_reg_15 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_15 <= s_reg_16;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_16
        if (i_rst == 1'b0) 
          begin
            s_reg_16 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_16 <= s_reg_17;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_17
        if (i_rst == 1'b0) 
          begin
            s_reg_17 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_17 <= s_reg_18;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_18
        if (i_rst == 1'b0) 
          begin
            s_reg_18 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_18 <= s_reg_19;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_19
        if (i_rst == 1'b0) 
          begin
            s_reg_19 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_19 <= s_reg_20;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_20
        if (i_rst == 1'b0) 
          begin
            s_reg_20 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_20 <= s_reg_21;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_21
        if (i_rst == 1'b0) 
          begin
            s_reg_21 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_21 <= s_reg_22;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_22
        if (i_rst == 1'b0) 
          begin
            s_reg_22 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_22 <= s_reg_23;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_23
        if (i_rst == 1'b0) 
          begin
            s_reg_23 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_23 <= s_reg_24;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_24
        if (i_rst == 1'b0) 
          begin
            s_reg_24 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_24 <= s_reg_25;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_25
        if (i_rst == 1'b0) 
          begin
            s_reg_25 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_25 <= s_reg_26;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_26
        if (i_rst == 1'b0) 
          begin
            s_reg_26 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_26 <= s_reg_27;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_27
        if (i_rst == 1'b0) 
          begin
            s_reg_27 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_27 <= s_reg_28;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_28
        if (i_rst == 1'b0) 
          begin
            s_reg_28 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_28 <= s_reg_29;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_29
        if (i_rst == 1'b0) 
          begin
            s_reg_29 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_29 <= s_reg_30;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_30
        if (i_rst == 1'b0) 
          begin
            s_reg_30 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_30 <= s_reg_31;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_31
        if (i_rst == 1'b0) 
          begin
            s_reg_31 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_31 <= SobelFilter_Mul_32Sx3S_32S_4_26_out1;
                      end
                    2'd1: 
                      begin
                        s_reg_31 <= i_rgb_data;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_4
        if (i_rst == 1'b0) 
          begin
            s_reg_4 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  s_reg_4 <= SobelFilter_Add_32Ux32U_32U_1_24_out1;
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_s_reg_49
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                2'd0, 2'd3: 
                  begin
                    s_reg_49 <= SobelFilter_Mul_32Sx9U_32S_4_27_out1;
                  end
                2'd1: 
                  begin
                    s_reg_49 <= SobelFilter_Mul_32Sx4U_32S_4_13_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_5
        if (i_rst == 1'b0) 
          begin
            s_reg_5 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_5 <= s_reg_7;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_29
    always @(posedge i_clk)
      begin : drive_s_reg_6_slice
        if (i_rst == 1'b0) 
          begin
            s_reg_6_slice <= 29'd000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_6_slice <= s_reg_5[28:0];
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_s_reg_66
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              s_reg_66 <= SobelFilter_Minus_32S_32S_4_16_out1;
            end
        endcase
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_7
        if (i_rst == 1'b0) 
          begin
            s_reg_7 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_7 <= s_reg_8;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_8
        if (i_rst == 1'b0) 
          begin
            s_reg_8 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_8 <= s_reg_9;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_9
        if (i_rst == 1'b0) 
          begin
            s_reg_9 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    2'd0, 2'd3: 
                      begin
                        s_reg_9 <= s_reg_10;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    always @(o_avg_data or gs_ctrl_do_filter_h6 or s_reg_6_slice)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_6_in2
        if (gs_ctrl_do_filter_h6) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_6_in2 = o_avg_data;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_6_in2 = {s_reg_6_slice, 3'd0};
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_6
    assign SobelFilter_Add_32Ux32U_32U_4_6_out1 = SobelFilter_Add_32Ux32U_32U_4_6_in2 + s_reg_4;
    
    // resource: mux_32bx3i0c
    always @(s_reg_15 or s_reg_24 or s_reg_5 or global_state)
      begin : drive_SobelFilter_Mul_32Sx7S_32S_4_7_in2
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_7_in2 = s_reg_15;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_7_in2 = s_reg_24;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_7_in2 = s_reg_5;
            end
        endcase
      end
    
    // resource: mux_3bx3i3c
    always @(global_state)
      begin : drive_SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice = 3'd5;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice = 3'd2;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice = 3'd1;
            end
        endcase
      end
    
    // resource: SobelFilter_Mul_32Sx7S_32S_4  instance: SobelFilter_Mul_32Sx7S_32S_4_7
    assign SobelFilter_Mul_32Sx7S_32S_4_7_out1 = SobelFilter_Mul_32Sx7S_32S_4_7_in2 * {{{ 25 {SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice[2]}}, SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice[2]}, {1'b0, {SobelFilter_Mul_32Sx7S_32S_4_7_in1_slice[1:0], 3'd3}}};
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_8
    assign SobelFilter_Add_32Ux32U_32U_4_8_out1 = SobelFilter_Mul_32Sx7S_32S_4_7_out1 + SobelFilter_Add_32Ux32U_32U_4_6_out1;
    
    // resource: SobelFilter_Mul_32Sx4S_32S_4  instance: SobelFilter_Mul_32Sx4S_32S_4_9
    assign SobelFilter_Mul_32Sx4S_32S_4_9_out1 = s_reg_7 * 32'd4294967289;
    
    // instance: drive_SobelFilter_Minus_32S_32S_4_10_in1
    assign SobelFilter_Minus_32S_32S_4_10_in1 = {s_reg_8[30:0], 1'b0};
    
    // resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_10
    assign SobelFilter_Minus_32S_32S_4_10_out1 = -SobelFilter_Minus_32S_32S_4_10_in1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_11
    assign SobelFilter_Add_32Ux32U_32U_4_11_out1 = SobelFilter_Mul_32Sx4S_32S_4_9_out1 + SobelFilter_Add_32Ux32U_32U_4_8_out1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_12
    assign SobelFilter_Add_32Ux32U_32U_4_12_out1 = SobelFilter_Add_32Ux32U_32U_4_11_out1 + SobelFilter_Minus_32S_32S_4_10_out1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_27 or s_reg_9 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Mul_32Sx4U_32S_4_13_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Mul_32Sx4U_32S_4_13_in2 = s_reg_27;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx4U_32S_4_13_in2 = s_reg_9;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx4U_32S_4  instance: SobelFilter_Mul_32Sx4U_32S_4_13
    assign SobelFilter_Mul_32Sx4U_32S_4_13_out1 = SobelFilter_Mul_32Sx4U_32S_4_13_in2 * 32'd0000000011;
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Add_32Ux32U_32U_4_8_out1 or SobelFilter_Mul_32Sx4U_32S_4_13_out1 or gs_ctrl_do_filter_h4)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_14_in2
        if (gs_ctrl_do_filter_h4) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_14_in2 = SobelFilter_Add_32Ux32U_32U_4_8_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_14_in2 = SobelFilter_Mul_32Sx4U_32S_4_13_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(s_reg_66 or SobelFilter_Add_32Ux32U_32U_4_12_out1 or gs_ctrl_do_filter_h4)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_14_in1
        if (gs_ctrl_do_filter_h4) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_14_in1 = s_reg_66;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_14_in1 = SobelFilter_Add_32Ux32U_32U_4_12_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_14
    assign SobelFilter_Add_32Ux32U_32U_4_14_out1 = SobelFilter_Add_32Ux32U_32U_4_14_in2 + SobelFilter_Add_32Ux32U_32U_4_14_in1;
    
    // resource: mux_32bx3i0c
    always @(s_reg_10 or s_reg_23 or s_reg_26 or global_state)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_15_in2
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_15_in2 = s_reg_23;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_15_in2 = s_reg_26;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_15_in2 = s_reg_10;
            end
        endcase
      end
    
    // resource: mux_4bx2i2c
    always @(gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_15_in1_slice
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Mul_32Sx6S_32S_4_15_in1_slice = 4'd05;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx6S_32S_4_15_in1_slice = 4'd10;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx6S_32S_4  instance: SobelFilter_Mul_32Sx6S_32S_4_15
    assign SobelFilter_Mul_32Sx6S_32S_4_15_out1 = SobelFilter_Mul_32Sx6S_32S_4_15_in2 * {27'd134217727, {SobelFilter_Mul_32Sx6S_32S_4_15_in1_slice, 1'b1}};
    
    // resource: mux_31bx3i0c
    always @(s_reg_11[30:0] or s_reg_25[30:0] or s_reg_28[30:0] or global_state)
      begin : drive_SobelFilter_Minus_32S_32S_4_16_in1_slice
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Minus_32S_32S_4_16_in1_slice = s_reg_25[30:0];
            end
          2'd2: 
            begin
              SobelFilter_Minus_32S_32S_4_16_in1_slice = s_reg_28[30:0];
            end
          default: 
            begin
              SobelFilter_Minus_32S_32S_4_16_in1_slice = s_reg_11[30:0];
            end
        endcase
      end
    
    // resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_16
    assign SobelFilter_Minus_32S_32S_4_16_out1 = -{SobelFilter_Minus_32S_32S_4_16_in1_slice, 1'b0};
    
    // resource: mux_32bx2i0c
    always @(s_reg_31 or SobelFilter_Mul_32Sx6S_32S_4_15_out1 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_31_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_31_in2 = s_reg_31;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_31_in2 = SobelFilter_Mul_32Sx6S_32S_4_15_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Add_32Ux32U_32U_4_8_out1 or SobelFilter_Add_32Ux32U_32U_4_14_out1 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_31_in1
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_31_in1 = SobelFilter_Add_32Ux32U_32U_4_8_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_31_in1 = SobelFilter_Add_32Ux32U_32U_4_14_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_31
    assign SobelFilter_Add_32Ux32U_32U_4_31_out1 = SobelFilter_Add_32Ux32U_32U_4_31_in2 + SobelFilter_Add_32Ux32U_32U_4_31_in1;
    
    // resource: mux_32bx3i0c
    always @(SobelFilter_Add_32Ux32U_32U_4_31_out1 or SobelFilter_Mul_32Sx3S_32S_4_26_out1 or SobelFilter_Add_32Ux32U_32U_4_32_out1 or global_state)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_18_in2
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_18_in2 = SobelFilter_Mul_32Sx3S_32S_4_26_out1;
            end
          2'd2: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_18_in2 = SobelFilter_Add_32Ux32U_32U_4_32_out1;
            end
          default: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_18_in2 = SobelFilter_Add_32Ux32U_32U_4_31_out1;
            end
        endcase
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Minus_32S_32S_4_16_out1 or SobelFilter_Add_32Ux32U_32U_4_34_out1 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_18_in1
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_18_in1 = SobelFilter_Add_32Ux32U_32U_4_34_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_18_in1 = SobelFilter_Minus_32S_32S_4_16_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_18
    assign SobelFilter_Add_32Ux32U_32U_4_18_out1 = SobelFilter_Add_32Ux32U_32U_4_18_in2 + SobelFilter_Add_32Ux32U_32U_4_18_in1;
    
    // resource: mux_32bx3i0c
    always @(s_reg_12 or s_reg_20 or s_reg_29 or global_state)
      begin : drive_SobelFilter_Mul_32Sx7S_32S_4_19_in2
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_19_in2 = s_reg_20;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_19_in2 = s_reg_29;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_19_in2 = s_reg_12;
            end
        endcase
      end
    
    // resource: mux_5bx3i3c
    always @(global_state)
      begin : drive_SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice = 5'd19;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice = 5'd30;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice = 5'd05;
            end
        endcase
      end
    
    // resource: SobelFilter_Mul_32Sx7S_32S_4  instance: SobelFilter_Mul_32Sx7S_32S_4_19
    assign SobelFilter_Mul_32Sx7S_32S_4_19_out1 = SobelFilter_Mul_32Sx7S_32S_4_19_in2 * {{{ 25 {SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice[4]}}, SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice[4:1]}, {1'b0, {SobelFilter_Mul_32Sx7S_32S_4_19_in1_slice[0], 1'b1}}};
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_20
    assign SobelFilter_Add_32Ux32U_32U_1_20_out1 = SobelFilter_Mul_32Sx7S_32S_4_19_out1 + SobelFilter_Add_32Ux32U_32U_4_18_out1;
    
    // resource: mux_32bx3i0c
    always @(s_reg_13 or s_reg_21 or s_reg_30 or global_state)
      begin : drive_SobelFilter_Mul_32Sx7S_32S_4_21_in2
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_21_in2 = s_reg_21;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_21_in2 = s_reg_30;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_21_in2 = s_reg_13;
            end
        endcase
      end
    
    // resource: mux_4bx3i3c
    always @(global_state)
      begin : drive_SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice
        case (global_state) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice = 4'd05;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice = 4'd02;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice = 4'd14;
            end
        endcase
      end
    
    // resource: SobelFilter_Mul_32Sx7S_32S_4  instance: SobelFilter_Mul_32Sx7S_32S_4_21
    assign SobelFilter_Mul_32Sx7S_32S_4_21_out1 = SobelFilter_Mul_32Sx7S_32S_4_21_in2 * {{{ 25 {SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice[3]}}, SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice[3:2]}, {1'b0, {SobelFilter_Mul_32Sx7S_32S_4_21_in1_slice[1:0], 2'd3}}};
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_22
    assign SobelFilter_Add_32Ux32U_32U_1_22_out1 = SobelFilter_Mul_32Sx7S_32S_4_21_out1 + SobelFilter_Add_32Ux32U_32U_1_20_out1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_14 or s_reg_22 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Mul_32Sx3S_32S_4_23_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Mul_32Sx3S_32S_4_23_in2 = s_reg_22;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx3S_32S_4_23_in2 = s_reg_14;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx3S_32S_4  instance: SobelFilter_Mul_32Sx3S_32S_4_23
    assign SobelFilter_Mul_32Sx3S_32S_4_23_out1 = SobelFilter_Mul_32Sx3S_32S_4_23_in2 * 32'd4294967293;
    
    // resource: mux_32bx2i0c
    always @(s_reg_31[28:0] or SobelFilter_Mul_32Sx3S_32S_4_23_out1 or gs_ctrl_do_filter_h4)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_24_in2
        if (gs_ctrl_do_filter_h4) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_24_in2 = {s_reg_31[28:0], 3'd0};
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_24_in2 = SobelFilter_Mul_32Sx3S_32S_4_23_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_24
    assign SobelFilter_Add_32Ux32U_32U_1_24_out1 = SobelFilter_Add_32Ux32U_32U_1_24_in2 + SobelFilter_Add_32Ux32U_32U_1_22_out1;
    
    // resource: SobelFilter_Mul_32Sx6U_32S_4  instance: SobelFilter_Mul_32Sx6U_32S_4_25
    assign SobelFilter_Mul_32Sx6U_32S_4_25_out1 = s_reg_15 * 32'd0000000039;
    
    // resource: mux_32bx2i0c
    always @(s_reg_17 or s_reg_19 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Mul_32Sx3S_32S_4_26_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Mul_32Sx3S_32S_4_26_in2 = s_reg_19;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx3S_32S_4_26_in2 = s_reg_17;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx3S_32S_4  instance: SobelFilter_Mul_32Sx3S_32S_4_26
    assign SobelFilter_Mul_32Sx3S_32S_4_26_out1 = SobelFilter_Mul_32Sx3S_32S_4_26_in2 * 32'd4294967293;
    
    // resource: SobelFilter_Mul_32Sx9U_32S_4  instance: SobelFilter_Mul_32Sx9U_32S_4_27
    assign SobelFilter_Mul_32Sx9U_32S_4_27_out1 = s_reg_18 * 32'd0000000283;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_32
    assign SobelFilter_Add_32Ux32U_32U_4_32_out1 = s_reg_49 + SobelFilter_Add_32Ux32U_32U_4_31_out1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_34
    assign SobelFilter_Add_32Ux32U_32U_4_34_out1 = SobelFilter_Mul_32Sx9U_32S_4_27_out1 + SobelFilter_Add_32Ux32U_32U_4_32_out1;
    
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_global_state
        if (i_rst == 1'b0) 
          begin
            global_state <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  global_state <= global_state_next;
                end
            endcase
          end
      end
    
    // resource: mux_2bx2i1c
    always @(global_state)
      begin : drive_global_state_next
        case (global_state) 
          2'd0, 2'd3: 
            begin
              global_state_next = 2'd1;
            end
          default: 
            begin
              global_state_next = global_state + 2'd1;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h6
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h6 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    2'd1, 2'd2: 
                      begin
                        gs_ctrl_do_filter_h6 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h6 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h2
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h2 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    2'd1: 
                      begin
                        gs_ctrl_do_filter_h2 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h2 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h4
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h4 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    2'd2: 
                      begin
                        gs_ctrl_do_filter_h4 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h4 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // instance: drive_i_rgb_busy
    assign i_rgb_busy = SobelFilter_gen_busy_r_4_62_out1[2];
    
    // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_62 (4 concurrent statements)
      assign SobelFilter_gen_busy_r_4_62_out1 = {SobelFilter_gen_busy_r_4_62_gnew_req, {SobelFilter_gen_busy_r_4_62_gdiv, SobelFilter_gen_busy_r_4_62_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next}};
      assign SobelFilter_gen_busy_r_4_62_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next = ~SobelFilter_gen_busy_r_4_62_gdiv;
      assign SobelFilter_gen_busy_r_4_62_gdiv = i_rgb_vld & !SobelFilter_gen_busy_r_4_62_gnew_req;
      assign SobelFilter_gen_busy_r_4_62_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);
    // (end of SobelFilter_gen_busy_r_4_62)
    
    // resource: regr_ss_1
    always @(posedge i_clk)
      begin : drive_i_rgb_m_unvalidated_req
        if (i_rst == 1'b0) 
          begin
            i_rgb_m_unvalidated_req <= 1'd1;
          end 
        else 
          begin
            i_rgb_m_unvalidated_req <= SobelFilter_N_Muxb_1_2_0_4_4_out1;
          end
      end
    
    // resource: SobelFilter_N_Muxb_1_2_0_4
    always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
      begin : SobelFilter_N_Muxb_1_2_0_4_4
        if (i_rgb_m_busy_req_0) 
          begin
            SobelFilter_N_Muxb_1_2_0_4_4_out1 = i_rgb_m_unvalidated_req;
          end 
        else 
          begin
            SobelFilter_N_Muxb_1_2_0_4_4_out1 = i_rgb_vld;
          end
      end
    
    // instance: drive_o_avg_vld
    assign o_avg_vld = SobelFilter_Or_1Ux1U_1U_4_2_out1;
    
    // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_2
    assign SobelFilter_Or_1Ux1U_1U_4_2_out1 = o_avg_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_1_out1;
    
    // resource: regr_sc_1
    always @(posedge i_clk)
      begin : drive_o_avg_m_unacked_req
        if (i_rst == 1'b0) 
          begin
            o_avg_m_unacked_req <= 1'd0;
          end 
        else 
          begin
            o_avg_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_60_out1;
          end
      end
    
    // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_60
    assign SobelFilter_And_1Ux1U_1U_4_60_out1 = o_avg_busy & o_avg_vld;
    
    // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_1
    assign SobelFilter_Xor_1Ux1U_1U_1_1_out1 = o_avg_m_req_m_trig_req ^ o_avg_m_req_m_prev_trig_req;
    
    // resource: regr_sc_1
    always @(posedge i_clk)
      begin : drive_o_avg_m_req_m_prev_trig_req
        if (i_rst == 1'b0) 
          begin
            o_avg_m_req_m_prev_trig_req <= 1'd0;
          end 
        else 
          begin
            o_avg_m_req_m_prev_trig_req <= o_avg_m_req_m_trig_req;
          end
      end
    
    // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_3
    assign SobelFilter_Not_1U_1U_1_3_out1 = !o_avg_m_req_m_trig_req;

endmodule

